"""
Django settings for PPMA project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import firebase_admin
from firebase_admin import credentials
import dj_database_url
from pathlib import Path

import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent




# Firebase configuration
FIREBASE_KEY_PATH = BASE_DIR / "PPMA" / "firebase-key.json"

# Initialize Firebase Admin SDK
def initialize_firebase():
    """Initialize Firebase Admin SDK if not already initialized."""
    if not firebase_admin._apps:  # Check if Firebase is not already initialized
        try:
            if FIREBASE_KEY_PATH.exists():
                cred = credentials.Certificate(str(FIREBASE_KEY_PATH))
                firebase_admin.initialize_app(cred)
                print("‚úÖ Firebase initialized successfully")
                return True
            else:
                print(f"‚ö†Ô∏è Firebase key not found at: {FIREBASE_KEY_PATH}")
                print("üîß Please download your service account key and place it in the correct location")
                return False
        except Exception as e:
            print(f"‚ùå Firebase initialization failed: {e}")
            return False
    else:
        print("‚ÑπÔ∏è Firebase already initialized")
        return True

# Initialize Firebase
FIREBASE_INITIALIZED = initialize_firebase()



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-$70!pna@gl9&(&!oske)1zkadl!s)us61jxgqd=(prrf4*2fga'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',  # Add this for CORS support
    'rest_framework',  # Django REST Framework for API support
    'rest_framework.authtoken',
    'WebApp',  # Custom app for the project
]


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # Add this FIRST
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# CORS settings for mobile app
CORS_ALLOW_ALL_ORIGINS = True  # For development only
CORS_ALLOWED_ORIGINS = [
    "http://10.0.2.2:8000",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    "http://192.168.0.121:8000",
]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',  # Use token auth
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',  # Public access by default
    ],
}

ROOT_URLCONF = 'PPMA.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'PPMA.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": dj_database_url.config(
        default=os.getenv(
            "DATABASE_URL",
            "postgres://ppms_user:PLWzUtw8ZACB2VGcCNwMUxWK7oGve8vS@dpg-d353u6m3jp1c73eo5rpg-a:5432/PPMS"
        ),
        conn_max_age=600,
        ssl_require=True,
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Manila'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Email settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'  # Use your email provider's SMTP
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'ppms.cluster4imus@gmail.com '
EMAIL_HOST_PASSWORD = 'aaoy txgi vfra cule'  # Use app password for Gmail
DEFAULT_FROM_EMAIL = 'ppms.cluster4imus@gmail.com'

BASE_DIR = Path(__file__).resolve().parent.parent
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')



CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("127.0.0.1", 6379)],
        },
    },
}


LOGIN_URL = '/login/'

# ‚úÖ Sessions last 30 days (you can increase if needed)
SESSION_COOKIE_AGE = 60 * 60 * 24 * 30  # 30 days

# ‚úÖ Don‚Äôt kill session when browser closes
SESSION_EXPIRE_AT_BROWSER_CLOSE = False

# ‚úÖ (Optional) Store session in DB (default)
SESSION_ENGINE = 'django.contrib.sessions.backends.db'

# ‚úÖ Extra safety

SESSION_SAVE_EVERY_REQUEST = True
