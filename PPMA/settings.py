"""
Django settings for PPMA project.

Generated by 'django-admin startproject' using Django 5.1.1.
"""

import os
import dj_database_url
import json
import cloudinary
import cloudinary.uploader
import cloudinary.api
import firebase_admin
from firebase_admin import credentials
from pathlib import Path

# =======================
# Paths
# =======================
BASE_DIR = Path(__file__).resolve().parent.parent



# -------------------------------------------
# ✅ CLOUDINARY CONFIGURATION
# -------------------------------------------
cloudinary.config(
    cloud_name=os.environ.get('CLOUDINARY_CLOUD_NAME'),
    api_key=os.environ.get('CLOUDINARY_API_KEY'),
    api_secret=os.environ.get('CLOUDINARY_API_SECRET'),
    secure=True
)

# =======================
# Firebase configuration
# =======================

FIREBASE_KEY_PATH = BASE_DIR / "PPMA" / "firebase-key.json"

def initialize_firebase():
    """Initialize Firebase using FIREBASE_KEY_JSON from Railway."""
    if firebase_admin._apps:
        return True  # Already initialized

    firebase_json = os.environ.get("FIREBASE_KEY_JSON")
    if not firebase_json:
        print("⚠️ FIREBASE_KEY_JSON not found in environment variables.")
        return False

    try:
        cred_info = json.loads(firebase_json)
    except json.JSONDecodeError:
        # Handle if env var is double-escaped
        firebase_json = firebase_json.replace('\\"', '"')
        cred_info = json.loads(firebase_json)

    # Ensure proper newline formatting for private key
    if "private_key" in cred_info and "\\n" in cred_info["private_key"]:
        cred_info["private_key"] = cred_info["private_key"].replace("\\n", "\n")

    cred = credentials.Certificate(cred_info)
    firebase_admin.initialize_app(cred)
    print("✅ Firebase initialized successfully!")
    return True

FIREBASE_INITIALIZED = initialize_firebase()

# =======================
# Security
# =======================
SECRET_KEY = os.environ.get(
    "DJANGO_SECRET_KEY", "django-insecure-CHANGE_THIS_IN_PRODUCTION"
)
DEBUG = os.environ.get("DEBUG", "False").lower() == "true"

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

ALLOWED_HOSTS = [
    ".railway.app",
    "myppma.com",
    "www.myppma.com",
    "ppma.myppma.com",
]

CSRF_TRUSTED_ORIGINS = [
    "https://*.railway.app",
    "https://myppma.com",
    "https://www.myppma.com",
    "https://ppma.myppma.com",
]

# =======================
# Installed Apps
# =======================
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "rest_framework",
    "rest_framework.authtoken",
    "channels",
    'cloudinary',             # ✅ Added Cloudinary
    'cloudinary_storage',
    "WebApp",
]

# =======================
# Middleware
# =======================
MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# =======================
# CORS / CSRF
# =======================
CORS_ALLOWED_ORIGINS = [
    "https://profilenmonitoringsystem-production.up.railway.app",
    "http://127.0.0.1:8000",
    "http://localhost:8000",
]

CORS_ALLOW_CREDENTIALS = True  # <-- Important for logged-in AJAX requests

CORS_ALLOW_HEADERS = [
    "accept", "accept-encoding", "authorization", "content-type", "dnt",
    "origin", "user-agent", "x-csrftoken", "x-requested-with",
]

CSRF_TRUSTED_ORIGINS = [
    "https://profilenmonitoringsystem-production.up.railway.app",
]


# =======================
# REST Framework
# =======================
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.AllowAny",
    ],
}

# =======================
# URLs & Templates
# =======================
ROOT_URLCONF = "PPMA.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "WebApp" / "Templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                
            ],
        },
    },
]


WSGI_APPLICATION = "PPMA.wsgi.application"
ASGI_APPLICATION = "PPMA.asgi.application"

# =======================
# Database (PostgreSQL on Railway)
# =======================
# =======================
# Database (PostgreSQL on Railway)
# =======================
DATABASES = {
    'default': dj_database_url.config(
        default=os.environ.get('DATABASE_URL')
    )
}

# =======================
# Password validation
# =======================
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# =======================
# Internationalization
# =======================
LANGUAGE_CODE = "en-us"
TIME_ZONE = "Asia/Manila"
USE_I18N = True
USE_TZ = True

# =======================
# Static / Media
# =======================
STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# ✅ Use Cloudinary for media storage
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# =======================
# Email Configuration
# =======================
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"

EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False

EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = os.environ.get("DEFAULT_FROM_EMAIL", EMAIL_HOST_USER)
EMAIL_TIMEOUT = int(os.environ.get("EMAIL_TIMEOUT", 30))
EMAIL_FAIL_SILENTLY = False

if not EMAIL_HOST_USER or not EMAIL_HOST_PASSWORD:
    import warnings
    warnings.warn("⚠️ EMAIL_HOST_USER or EMAIL_HOST_PASSWORD is not set! Emails will fail.")

# =======================
# Channels (WebSockets)
# =======================
if os.environ.get("REDIS_URL"):
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels_redis.core.RedisChannelLayer",
            "CONFIG": {"hosts": [os.environ["REDIS_URL"]]},
        },
    }
else:
    CHANNEL_LAYERS = {"default": {"BACKEND": "channels.layers.InMemoryChannelLayer"}}

# =======================
# Sessions
# =======================
LOGIN_URL = "/login/"
SESSION_COOKIE_AGE = 60 * 60 * 24 * 30  # 30 days
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
SESSION_ENGINE = "django.contrib.sessions.backends.db"
SESSION_SAVE_EVERY_REQUEST = True

# =======================
# Security (Production)
# =======================
SECURE_SSL_REDIRECT = not DEBUG
CSRF_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_SECURE = not DEBUG
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_HSTS_SECONDS = 31536000
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True











