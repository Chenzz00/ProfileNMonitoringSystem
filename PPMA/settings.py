"""
Django settings for PPMA project.

Generated by 'django-admin startproject' using Django 5.1.1.
"""

import firebase_admin
from firebase_admin import credentials
from pathlib import Path
import os
import dj_database_url  # ✅ For Render Postgres support

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# =======================
# Firebase configuration
# =======================
FIREBASE_KEY_PATH = BASE_DIR / "PPMA" / "firebase-key.json"

def initialize_firebase():
    """Initialize Firebase Admin SDK if not already initialized."""
    if not firebase_admin._apps:
        try:
            if FIREBASE_KEY_PATH.exists():
                cred = credentials.Certificate(str(FIREBASE_KEY_PATH))
                firebase_admin.initialize_app(cred)
                print("✅ Firebase initialized successfully")
                return True
            else:
                print(f"⚠️ Firebase key not found at: {FIREBASE_KEY_PATH}")
                return False
        except Exception as e:
            print(f"❌ Firebase initialization failed: {e}")
            return False
    else:
        print("ℹ️ Firebase already initialized")
        return True

FIREBASE_INITIALIZED = initialize_firebase()

# =======================
# Security / Debug
# =======================
SECRET_KEY = 'django-insecure-$70!pna@gl9&(&!oske)1zkadl!s)us61jxgqd=(prrf4*2fga'
DEBUG = True
ALLOWED_HOSTS = ['*']

# =======================
# Applications
# =======================
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party
    'corsheaders',
    'rest_framework',
    'rest_framework.authtoken',

    # Local apps
    'WebApp',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # must be first
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# =======================
# CORS (for mobile app)
# =======================
CORS_ALLOW_ALL_ORIGINS = True
CSRF_TRUSTED_ORIGINS = [
    "http://10.0.2.2:8000",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    "http://192.168.0.121:8000",
    "https://ppms-website.onrender.com",  
]


CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
}

# =======================
# Templates
# =======================
ROOT_URLCONF = 'PPMA.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'WebApp' / 'Templates'],  # ✅ Template folder
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'PPMA.wsgi.application'

# =======================
# Database (Hybrid Setup)
# =======================
if os.environ.get("RENDER"):  # ✅ Running on Render
    DATABASES = {
        "default": dj_database_url.config(
            default="postgresql://user:password@hostname:5432/dbname",  # fallback if DATABASE_URL missing
            conn_max_age=600,
            ssl_require=True
        )
    }
else:  # ✅ Local development uses SQLite
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
# =======================
# Password validation
# =======================
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# =======================
# Internationalization
# =======================
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Asia/Manila'
USE_I18N = True
USE_TZ = True

# =======================
# Static / Media
# =======================
STATIC_URL = 'static/'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# =======================
# Email
# =======================
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'ppms.cluster4imus@gmail.com'
EMAIL_HOST_PASSWORD = 'aaoy txgi vfra cule'  # app password
DEFAULT_FROM_EMAIL = 'ppms.cluster4imus@gmail.com'

# =======================
# Channels (WebSockets)
# =======================
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("127.0.0.1", 6379)],
        },
    },
}

# =======================
# Sessions
# =======================
LOGIN_URL = '/login/'
SESSION_COOKIE_AGE = 60 * 60 * 24 * 30  # 30 days
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_SAVE_EVERY_REQUEST = True



